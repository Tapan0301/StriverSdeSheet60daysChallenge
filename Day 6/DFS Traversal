void dfs(vector<int> adj[],vector<int> &vis,int node,vector<int> &sdfs)
{
    sdfs.push_back(node);
    vis[node]=1;
    for(auto it:adj[node]){
        if(!vis[it]){
            dfs(adj,vis,it,sdfs);
        }
    }
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    vector<vector<int>> ans;
    vector<int> vis(V,0);
    vector<int> adj[V];
    for(int i=0;i<E;i++)
    {
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    for(int i=0;i<V;i++)
    {
        vector<int> sdfs;
        if(!vis[i])
        {
            dfs(adj,vis,i,sdfs);
        }
        if(sdfs.size()!=0)
        {
            sort(sdfs.begin(),sdfs.end());
            ans.push_back(sdfs);
        }
    }
    return ans;
}
